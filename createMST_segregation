#
# Python script to generate Minimum Spanning Tree for a set
# of astronomical objects distributed in the plane of the sky
#
# Information on the MiSTree package can be found here:
# https://knaidoo29.github.io/mistreedoc/minimum_spanning_tree.html
#
# v 2023.05 (Alvaro Sanchez-Monge)
#

# Load python functions and packages
#
from __future__ import print_function
import numpy as np
import matplotlib.pylab as plt
import mistree as mist
import astropy.units as u
from astropy.coordinates import SkyCoord
import pandas as pd
import heapq as hq
import random as rand
import alphashape
from shapely.geometry import Polygon
#-----------------------------------------------------------------------
#
# USER-define parameters
#
# File containing information of the astronomical sources
# Current version: three columns separated with ; symbol
#  - 1st column: Name of source
#  - 2nd column: Right Ascension (in h:m:s)
#  - 3rd column: Declination (in h:m:s)
#
sources_filename = 'Smass.csv'

#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
#
# MAIN functions start here
#

# Load file containing sources coordinates
#
df = pd.read_csv(sources_filename, sep=';', usecols=[0,1,2,3], header=None, index_col=False)

source_Name = df[0]
source_RA = df[1]
source_Dec = df[2]
source_mass=df[3]
nSources = len(source_RA)
source_coords = [source_RA+' '+source_Dec]

c = []
for i in range(0, nSources):
    c.append(SkyCoord(source_coords[0][i], frame='fk5', unit=(u.hourangle, u.deg), obstime="J2000"))

# Convert coordinates to degrees for usage in the MST package
#
x_list = []
y_list = []
for i in range(0, nSources):
    x_list.append(c[i].ra.degree)
    y_list.append(c[i].dec.degree)
xp=[]
yp=[]


#Camp comú
nramax=274.55544999999995
nramin=274.5478833333333
ndemax=-16.82250833333333
ndemin=-16.83826111111111
sramax=274.5606666666667
sramin=274.5472
sdemax=-16.95311388888889
sdemin=-16.966324999999998
control=0
if control == 1:
    for i in range(len(x_list)):
        if x_list[i] <=  nramax and x_list[i]>= nramin and y_list[i] <= ndemax and y_list[i]>=ndemin:
            xp.append(x_list[i])
            yp.append(y_list[i])
elif control == 0:
    for i in range(len(x_list)):
        if x_list[i] <=  sramax and x_list[i] >= sramin and y_list[i] <= sdemax and y_list[i]>=sdemin:
            xp.append(x_list[i])
            yp.append(y_list[i])
x=np.asarray(xp)
y=np.asarray(yp)

# Run MST functions to generate it
#
mst = mist.GetMST(x=x, y=y)

# Get statistics of the MST
#
d, l, b, s, l_index, b_index = mst.get_stats(include_index=True)


# Print segments properties
#
print("Median length of segments in the MST is " + str(np.median(l)*3600.) + " arcsec")
print("Mean length of segments in the MST is " + str(np.mean(l)*3600.) + " arcsec")
print("Standard deviation of the lengths of segments is " + str(np.std(l)*3600.) + " arcsec")
print("Minimum length of a segment is " + str(np.min(l)*3600.) + " arcsec")
print("Maximum length of a segment is " + str(np.max(l)*3600.) + " arcsec")
index_u = l_index[0]
index_v = l_index[1]
segs=[]
desegs=[]
for N in range(1,25):
    target_node = hq.nlargest(N, range(len(source_mass)), key=source_mass.__getitem__)

#calcul Lmax
    cont=0
    total_connected_nodes=[]
    for i in target_node:
        connected_nodes = []
        for u, v in zip(index_u, index_v):
            if u == i:
                connected_nodes.append(v)
            elif v == i:
                connected_nodes.append(u)
        cont+=len(connected_nodes)
        total_connected_nodes.append(connected_nodes)
    Lmax=0
    i=0
    for i in range(len(target_node)):
        for element in total_connected_nodes[i]:
            Lmax += ((x[target_node[i]] - x[element])**2 + (y[target_node[i]] - y[element])**2)**(1/2)
    Lmax=Lmax

#calcul Lrand
    Lrand=0
    Lrandsum=[]
    cont=0
    for j in range(3000):
        target_node=rand.sample(range(len(x)),N)
        total_connected_nodes=[]
        for i in target_node:
            connected_nodes = []
            for u, v in zip(index_u, index_v):
                if u == i:
                    connected_nodes.append(v)
                elif v == i:
                    connected_nodes.append(u)
            cont+=len(connected_nodes)
            total_connected_nodes.append(connected_nodes)
        i=0
        Lrandi=0
        for i in range(len(target_node)):
            for element in total_connected_nodes[i]:
                Lrandi += ((x[target_node[i]] - x[element])**2 + (y[target_node[i]] - y[element])**2)**(1/2)
        Lrandi=Lrandi
        Lrand+=Lrandi
        Lrandsum.append(Lrandi)
    Lrand=Lrand/3000
    Lrande=0
    for element in Lrandsum:
        Lrande+=(Lrand-element)**2
    Lrande=(Lrande/3000)**(1/2)  
    seg = Lrand/Lmax
    deseg=Lrande/Lmax 
    segs.append(seg)
    desegs.append(deseg)
#Retornem la segregacio


#calcul m


Ltot =0
Ltotsum=[]
for i in range(len(index_u)):
    suma=((x[index_u[i]] - x[index_v[i]])**2 + (y[index_u[i]] - y[index_v[i]])**2)**(1/2)
    Ltot+=suma
    Ltotsum.append(suma)
centrex=0
centrey=0
for i in range(len(x)):
    centrex+=x[i]
    centrey+=y[i]
centrex=centrex/len(x)
centrey=centrey/len(x)
dist=[]
for i in range(len(x)):
    dist.append(((centrex-x[i])**2+(centrey-y[i])**2)**(1/2))
pi=3.141592653589793
A=pi*np.max(dist)**2
m=Ltot/((len(x)*A)**(1/2)/(len(x)-1))
s=0
for element in Ltotsum:
    s+=(m-element)**2
s=s/len(x)
s=s**(1/2)
#retornem q
q=m/s
print("El valor de Q és "+ str(q))




# Plot MST on the sky
#
plt.figure(figsize=(7., 7.))
# plotting nodes:
plt.scatter(x, y, s=10, color='r')
# plotting MST edges:
plt.plot([x[l_index[0]], x[l_index[1]]],
    [y[l_index[0]], y[l_index[1]]],
    color='k')

target_node = hq.nlargest(N, range(len(source_mass)), key=source_mass.__getitem__)
plt.scatter(x[target_node[0]],y[target_node[0]],s=40,marker='*', color='blue')
plt.scatter(x[target_node[1]],y[target_node[1]],s=40, marker='*',color='green')
plt.scatter(centrex, centrey, s=10, marker='x',color='black')
plt.xlim(np.min(x)-0.1*(np.max(x)-np.min(x)), np.max(x)+0.1*(np.max(x)-np.min(x)))
plt.ylim(np.min(y)-0.1*(np.max(y)-np.min(y)), np.max(y)+0.1*(np.max(y)-np.min(y)))
plt.xlabel(r'$R.A.(degrees)$', size=16)
plt.ylabel(r'$Dec.(degrees)$', size=16)
plt.tight_layout()
plt.savefig('MST.png')
plt.figure(figsize=(7., 7.))
plt.errorbar(range(1,25), segs, yerr=desegs, fmt='o', capsize=5, markersize=8, label='Data points')
plt.xlabel(r'N', size=16)
plt.ylabel(r'Λ$_{MSR}$', size=16)
# Plot histogram of edge's lengths
#
# begins by binning the data and storing this in a dictionary.
hmst = mist.HistMST()
hmst.setup()
mst_dict = hmst.get_hist(d, l, b, s)

# plotting which takes as input the dictionary created before.
pmst = mist.PlotHistMST()
pmst.read_mst(mst_dict)
pmst.plot(saveas='MST_histograms.png')
